@using Microsoft.Extensions.Logging
@inject Estimator.UI.Services.IRateCard rateCardService
@inject ILogger<Error> Logger

<h5>Estimate Phase Rate Card Items</h5>
<h5>Total Cost for this phase: $@GetTotalCost()</h5>
<div class="row" >
    <div style="border: solid 1px black;">
@foreach (var item in phase.EstimatePhaseRateCardItems)
{
    <div class="row">
        <div class="col-10" @onclick="@(e => EditItem(item))">@item.RateCardItem.RoleName - @item.RateCardItem.Rate (@item.Count at @item.PercentageUtilized%)</div>
        <div class="col-2" @onclick="@(e => RemoveItem(item))" style="padding-left:1em;"><span class="oi oi-x" aria-hidden="true"></span> Remove</div>
    </div>
}
    </div>
</div>
<div class="row" style="margin-top:1em;">
    <div class="col-6" >
        <div style="background-color:#eeeeee;padding:.2em;">
            <p><b>All Resources</b></p>
            @{
                string groupName = "";
            }          
            @foreach (var item in rateCard.RateCardItems.OrderBy(p => p.GroupName).ThenByDescending(p => p.Rate))
            {
                if (item.GroupName != groupName)
                {
                    <div class="row">
                        <b> @item.GroupName </b>
                    </div>
                    groupName = item.GroupName;
                }
                <div @onclick="@(e => AddItem(item))">@item.RoleName - @item.Rate</div>
            }
        </div>
    </div>
    <div class="col-6" >
        <div style="background-color:#eeeeee;padding:.2em;">
            <p>
                <b>Selected Rate Card Item</b>
                <span class="oi oi-task" aria-hidden="true" style="padding-left:1em;"></span> Create New
            </p>

            <h5>@currentItem.RateCardItem?.RoleName</h5>
            <div class="container">
                <div class="row">
                    <div class="col-6" style="text-align:right;">
                        <span>Count</span>
                    </div>
                    <div class="col-4">
                        <InputNumber style="width: 3em;" @bind-Value="currentItem.Count"></InputNumber>
                    </div>
                </div>
                <div class="row" style="margin-top:.3em;">
                    <div class="col-6" style="text-align:right;">
                        <span>% Utilization</span>
                    </div>
                    <div class="col-4">
                        <InputNumber style="width: 4em;" @bind-Value="currentItem.PercentageUtilized"></InputNumber>
                    </div>
                </div>
                <div class="row">
                    <div class="col-6">
                        <span @onclick="SaveItem"><span class="oi oi-check" aria-hidden="true"></span> Save </span>
                    </div>
                    <div class="col-6">
                        <span @onclick="DeleteCurrentItem"><span class="oi oi-x" aria-hidden="true"></span> Delete</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



@code {
    [Parameter]
    public Estimator.UI.Model.EstimatePhase phase { get; set; }

    [Parameter]
    public Estimator.UI.Model.RateCard rateCard { get; set; } 

    [Parameter]
    public EventCallback<Estimator.UI.Model.EstimatePhaseRateCardItem> OnItemSaved { get; set; }

    [Parameter]
    public EventCallback<Estimator.UI.Model.EstimatePhaseRateCardItem> OnItemDeleted { get; set; }

    private Estimator.UI.Model.EstimatePhaseRateCardItem currentItem = new Estimator.UI.Model.EstimatePhaseRateCardItem();

    [CascadingParameter]
    public Error? Error { get; set; }

    protected override void OnInitialized()
    {
        try
        {
            Logger.LogInformation("In ResourcesSelectedForPhase Component");
            rateCard = rateCardService.GetRateCard();
            //if (estimate == null)
            //{
            //    estimate = new Estimator.UI.Model.Estimate();
            //}
            //editContext = new EditContext(estimate);

            //editContext.OnFieldChanged += EditContext_OnFieldChanged;
        }
        catch (Exception ex)
        {
            Error?.ProcessError(ex);
        }

    }



    private void AddNewItem()
    {
        currentItem = new Estimator.UI.Model.EstimatePhaseRateCardItem();

    }

    private void EditItem(Estimator.UI.Model.EstimatePhaseRateCardItem item)
    {
        currentItem = item;
    }

    private void AddItem(Estimator.UI.Model.RateCardItem rateCardItem)
    {
        currentItem.RateCardItem = rateCardItem;
    }

    private void RemoveItem(Estimator.UI.Model.EstimatePhaseRateCardItem item)
    {
        if (phase.EstimatePhaseRateCardItems.Exists(p => p == item))
        {
            phase.EstimatePhaseRateCardItems.Remove(item);

        }
    }

    private void SaveItem()
    {
        phase.EstimatePhaseRateCardItems.Add(currentItem);
        currentItem = new Estimator.UI.Model.EstimatePhaseRateCardItem();

    }

    private void DeleteCurrentItem()
    {
        if (phase.EstimatePhaseRateCardItems.Exists(p=> p == currentItem))
        {
            phase.EstimatePhaseRateCardItems.Remove(currentItem);

        }
        currentItem = new Estimator.UI.Model.EstimatePhaseRateCardItem();

    }

    private decimal GetTotalCost()
    {
        var total = 0m;
        foreach (var item in phase.EstimatePhaseRateCardItems)
        {
            if (item.RateCardItem != null)
            {
                total += item.Count * ((item.RateCardItem.Rate * (item.PercentageUtilized/100)) * (phase.LengthInWeeks * 40));
            }
        }
        return total;
    }

}
