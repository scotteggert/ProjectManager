@using Microsoft.Extensions.Logging
@using Estimator.UI.Maui.Components
@using DocumentFormat.OpenXml.Packaging;
@using DocumentFormat.OpenXml.Spreadsheet;
@using CommunityToolkit.Maui;
@using CommunityToolkit.Maui.Storage;
@using S = DocumentFormat.OpenXml.Spreadsheet.Sheets;
@using E = DocumentFormat.OpenXml.OpenXmlElement;
@using A = DocumentFormat.OpenXml.OpenXmlAttribute;

@inject ILogger<Error> Logger
@inject IFolderPicker FolderPicker

<div class="row">
    <h4>Make an Estimate</h4>
</div>
<div class="row">
    <div>
        <span style="cursor:pointer;" @onclick="ExportToExcel"><span class="oi oi-external-link" aria-hidden="false"></span> Export to Excel </span>
    </div>
</div>
<div class="row" style="margin-top:.2em;margin-bottom:.75em;">
    <div>
        <span style="cursor:pointer;" @onclick="ShowFileUpload"><span class="oi oi-hard-drive" aria-hidden="false"></span> Load Estimate </span>
    </div>
    <div hidden="@FileUploadVisible">
        <InputFile class="custom-file-input" OnChange="LoadFile"></InputFile>
    </div>

</div>
<EditForm EditContext="@editContext">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div style="background-color:#eeeeee;padding:.3em;">
        <div class="form-group">
            <label>Client Name</label>
            <InputText class="form-control" @bind-Value="estimate.ClientName" />
        </div>
        <div class="form-group">
            <label>Job Code</label>
            <InputText class="form-control" @bind-Value="estimate.JobCode" />
        </div>
        <div class="form-group">
            <label>Project Manager</label>
            <InputText class="form-control" @bind-Value="estimate.ProjectManager" />
        </div>
        <div class="form-group">
            <label>Estimate Date</label>
            <InputDate class="form-control" @bind-Value="estimate.EstimatedStartDate" />
        </div>
    </div>
    <div>
        <EstimatePhaseList @ref="EstimatePhaseListForm" estimatePhases="@estimate.EstimatePhases" />
    </div>


</EditForm>



@code {
    //private readonly IFolderPicker folderPicker;
    private EstimatePhaseList EstimatePhaseListForm;

    private EditContext? editContext;

    [Parameter]
    public string estimateId { get; set; } = string.Empty;

    [Parameter]
    public Estimator.UI.Model.Estimate estimate { get; set; } = new Estimator.UI.Model.Estimate();

    [Parameter]
    public EventCallback OnEstimateLoaded { get; set; }

    //[Parameter]
    //public EventCallback<Estimator.UI.Model.EstimatePhase> OnPhaseDeleted { get; set; }



    [CascadingParameter]
    public Error? Error { get; set; }

    protected override void OnInitialized()
    {
        try
        {
            Logger.LogInformation("In Estimate Component");
            if (estimate == null)
            {
                estimate = new Estimator.UI.Model.Estimate();
            }
            editContext = new EditContext(estimate);

            //editContext.OnFieldChanged += EditContext_OnFieldChanged;
        }
        catch (Exception ex)
        {
            Error?.ProcessError(ex);
        }

    }

    private async Task SaveEstimate()
    {
        if (editContext != null && editContext.Validate())
        {
            await Task.CompletedTask;
        }
    }

    //private void HandlePhaseSaved(Model.EstimatePhase phase)
    //{
    //    var findPhase = estimate.EstimatePhases.FirstOrDefault(p => p.Name == phase.Name);
    //    if (findPhase != null)
    //    {
    //        findPhase.Name = phase.Name;
    //        findPhase.Description = phase.Description;
    //        findPhase.EstimatePhaseRateCardItems = phase.EstimatePhaseRateCardItems;
    //    }
    //    else
    //    {
    //        estimate.EstimatePhases.Add(phase);
    //    }
    //}

    //private void HandlePhaseDeleted(Model.EstimatePhase phase)
    //{
    //    var findPhase = estimate.EstimatePhases.FirstOrDefault(p => p.Id == phase.Id);
    //    if (findPhase != null)
    //    {
    //        estimate.EstimatePhases.Remove(findPhase);
    //    }
    //}

    public bool FileUploadVisible { get; set; } = true;

    private void ShowFileUpload()
    {
        FileUploadVisible = !FileUploadVisible;
        //divLoadFile.ClassList.Remove("d-none");
        //EstimatePhaseListForm.ShowFileUpload();
    }

    private async Task ExportToExcel()
    {
        CancellationTokenSource source = new();
        CancellationToken token = source.Token;
        var result = await FolderPicker.PickAsync(token);
        if (result.IsSuccessful)
        {
            //using(SpreadsheetDocument sd = SpreadsheetDocument.Create(result.Folder.Path + "\\Estimate999.xlsx" , DocumentFormat.OpenXml.SpreadsheetDocumentType.Workbook)){

            try
            {
                using (SpreadsheetDocument document = SpreadsheetDocument.Create(result.Folder.Path + "\\Estimate - " + estimate.JobCode + " - " + DateTime.UtcNow.Ticks +".xlsx", DocumentFormat.OpenXml.SpreadsheetDocumentType.Workbook))
                {
                    WorkbookPart workbookPart = document.AddWorkbookPart();
                    workbookPart.Workbook = new Workbook();

                    WorksheetPart worksheetPart = workbookPart.AddNewPart<WorksheetPart>();
                    worksheetPart.Worksheet = new Worksheet(new SheetData());

                    Sheets sheets = workbookPart.Workbook.AppendChild(new Sheets());
                    //Sheet sheetEstimates = new Sheet()
                    //    {
                    //        Id = workbookPart.GetIdOfPart(worksheetPart),
                    //        SheetId = 1,
                    //        Name = "All Estimates"
                    //    };
                    //sheets.Append(sheetEstimates);

                    //workbookPart.Workbook.Save();

                    Sheet sheetEstimate = new Sheet()
                        {
                            Id = workbookPart.GetIdOfPart(worksheetPart),
                            SheetId = 1,
                            Name = estimate.JobCode
                        };
                    sheets.Append(sheetEstimate);

                    workbookPart.Workbook.Save();

                    // Add some data to the first worksheet that has a list of all estimates
                    SheetData sheetData = GetSheetData(workbookPart, sheetEstimate);// sheetEstimate.GetFirstChild<SheetData>();// worksheetPart.Worksheet.GetFirstChild<SheetData>();
                    Row row = new Row() { RowIndex = 1 };
                    Cell cell = new Cell() { CellReference = "A1", DataType = CellValues.String, CellValue = new CellValue("Client Name") };
                    row.Append(cell);
                    cell = new Cell() { CellReference = "B1", DataType = CellValues.String, CellValue = new CellValue("Job Code") };
                    row.Append(cell);
                    cell = new Cell() { CellReference = "C1", DataType = CellValues.String, CellValue = new CellValue("Project Manager") };
                    row.Append(cell);
                    cell = new Cell() { CellReference = "D1", DataType = CellValues.String, CellValue = new CellValue("Date Created") };
                    row.Append(cell);
                    sheetData.Append(row);

                    row = new Row() { RowIndex = 2 };
                    cell = new Cell() { CellReference = "A2", DataType = CellValues.String, CellValue = new CellValue(estimate.ClientName) };
                    row.Append(cell);
                    cell = new Cell() { CellReference = "B2", DataType = CellValues.String, CellValue = new CellValue(estimate.JobCode) };
                    row.Append(cell);
                    cell = new Cell() { CellReference = "C2", DataType = CellValues.String, CellValue = new CellValue(estimate.ProjectManager) };
                    row.Append(cell);
                    cell = new Cell() { CellReference = "D2", DataType = CellValues.String, CellValue = new CellValue(estimate.CreatedDate) };
                    row.Append(cell);
                    sheetData.Append(row);

                    row = new Row() { RowIndex = 3 };
                    cell = new Cell() { CellReference = "A3", DataType = CellValues.String, CellValue = new CellValue("Phases") };
                    row.Append(cell);
                    sheetData.Append(row);

                    UInt32 c = 4;
                    //Now write each phase to the worksheet
                    foreach(var phase in estimate.EstimatePhases)
                    {
                        row = new Row() { RowIndex = c };
                        cell = new Cell() { CellReference = "A" + c, DataType = CellValues.String, CellValue = new CellValue("Name") };
                        row.Append(cell);
                        sheetData.Append(row);

                        row = new Row() { RowIndex = c };
                        cell = new Cell() { CellReference = "B"+c, DataType = CellValues.String, CellValue = new CellValue(phase.Name) };
                        row.Append(cell);
                        sheetData.Append(row);
                        c++;

                        //
                        row = new Row() { RowIndex = c };
                        cell = new Cell() { CellReference = "A" + c, DataType = CellValues.String, CellValue = new CellValue("Description") };
                        row.Append(cell);
                        sheetData.Append(row);

                        row = new Row() { RowIndex = c };
                        cell = new Cell() { CellReference = "B" + c, DataType = CellValues.String, CellValue = new CellValue(phase.Description) };
                        row.Append(cell);
                        sheetData.Append(row);
                        c++;

                        //
                        row = new Row() { RowIndex = c };
                        cell = new Cell() { CellReference = "A" + c, DataType = CellValues.String, CellValue = new CellValue("Length In Weeks") };
                        row.Append(cell);
                        sheetData.Append(row);

                        row = new Row() { RowIndex = c };
                        cell = new Cell() { CellReference = "B" + c, DataType = CellValues.String, CellValue = new CellValue(phase.LengthInWeeks) };
                        row.Append(cell);
                        sheetData.Append(row);
                        c++;

                        c++;

                        row = new Row() { RowIndex = c };
                        cell = new Cell() { CellReference = "A"+c, DataType = CellValues.String, CellValue = new CellValue("Rate Card Items") };
                        row.Append(cell);
                        sheetData.Append(row);
                        c++;

                        foreach(var rci in phase.EstimatePhaseRateCardItems)
                        {
                            row = new Row() { RowIndex = c };
                            cell = new Cell() { CellReference = "A" + c, DataType = CellValues.String, CellValue = new CellValue("Role") };
                            row.Append(cell);
                            sheetData.Append(row);

                            row = new Row() { RowIndex = c };
                            cell = new Cell() { CellReference = "B" + c, DataType = CellValues.String, CellValue = new CellValue(rci.RateCardItem.RoleName) };
                            row.Append(cell);
                            sheetData.Append(row);
                            c++;
                            //
                            row = new Row() { RowIndex = c };
                            cell = new Cell() { CellReference = "A" + c, DataType = CellValues.String, CellValue = new CellValue("Count") };
                            row.Append(cell);
                            sheetData.Append(row);

                            row = new Row() { RowIndex = c };
                            cell = new Cell() { CellReference = "B" + c, DataType = CellValues.String, CellValue = new CellValue(rci.Count) };
                            row.Append(cell);
                            sheetData.Append(row);
                            c++;
                            //
                            row = new Row() { RowIndex = c };
                            cell = new Cell() { CellReference = "A" + c, DataType = CellValues.String, CellValue = new CellValue("PercentageUtilized") };
                            row.Append(cell);
                            sheetData.Append(row);

                            row = new Row() { RowIndex = c };
                            cell = new Cell() { CellReference = "B" + c, DataType = CellValues.String, CellValue = new CellValue(rci.PercentageUtilized) };
                            row.Append(cell);
                            sheetData.Append(row);
                            c++;
                            //
                            row = new Row() { RowIndex = c };
                            cell = new Cell() { CellReference = "A" + c, DataType = CellValues.String, CellValue = new CellValue("Rate") };
                            row.Append(cell);
                            sheetData.Append(row);

                            row = new Row() { RowIndex = c };
                            cell = new Cell() { CellReference = "B" + c, DataType = CellValues.String, CellValue = new CellValue(rci.RateCardItem.Rate) };
                            row.Append(cell);
                            sheetData.Append(row);
                            c++;

                        }
                        c++;


                    }

                    // Save the worksheet
                    worksheetPart.Worksheet.Save();
                }

            }
            catch(Exception ex)
            {

            }


            //}


            //await Toast.Make($"   The folder was picked: Name - {result.Folder.Name}, Path - {result.Folder.Path}", ToastDuration.Long).Show(cancellationToken);
        }
        else
        {
            //await Toast.Make($"The folder was not picked with error: {result.Exception.Message}").Show(cancellationToken);
        }





        //MemoryStream memoryStream = new MemoryStream();
        //SpreadsheetDocument spreadsheetDocument = SpreadsheetDocument.Create(memoryStream, DocumentFormat.OpenXml.SpreadsheetDocumentType.Workbook);

        ////add the excel contents...

        ////reset the position to the start of the stream
        //memoryStream.Seek(0, SeekOrigin.Begin);

        //return new FileStreamResult(memoryStream, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
    }


    public SheetData GetSheetData(WorkbookPart workbookPart, Sheet sheet)
    {
        // The sheet ID is the relationship ID between the workbook part and the worksheet part
        string relationshipId = sheet.Id;

        // Get the WorksheetPart associated with the given sheet
        WorksheetPart worksheetPart = (WorksheetPart)workbookPart.GetPartById(relationshipId);

        // Get the SheetData from the worksheet part
        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();

        return sheetData;
    }

    private void ImportEstimate()
    {

    }

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        if (e.File.Name.EndsWith(".xlsx"))
        {

            estimate = new Estimator.UI.Model.Estimate();

            var ms = new MemoryStream();
            await e.File.OpenReadStream().CopyToAsync(ms);

            var sd = SpreadsheetDocument.Open(ms, true);
            using (SpreadsheetDocument document = SpreadsheetDocument.Open(ms, true))
            {
                WorkbookPart workbookPart = document.WorkbookPart;
                //DocumentFormat.OpenXml.Spreadsheet.Workbook workbook = bkPart.Workbook;
                //  DocumentFormat.OpenXml.Spreadsheet.Sheet sheet = document.WorkbookPart.Workbook.Descendants<DocumentFormat.OpenXml.Spreadsheet.Sheet>().FirstOrDefault();
                //WorksheetPart wsPart = (WorksheetPart)bkPart.GetPartById(s.Id);
                //DocumentFormat.OpenXml.Spreadsheet.SheetData sheetdata = wsPart.Worksheet.Elements<DocumentFormat.OpenXml.Spreadsheet.SheetData>().FirstOrDefault();

                var firstSheet = document.WorkbookPart.Workbook.Descendants<DocumentFormat.OpenXml.Spreadsheet.Sheet>().First();
                WorksheetPart wsPart = (WorksheetPart)document.WorkbookPart.GetPartById(firstSheet.Id);
                DocumentFormat.OpenXml.Spreadsheet.SheetData sheetdata = wsPart.Worksheet.Elements<DocumentFormat.OpenXml.Spreadsheet.SheetData>().FirstOrDefault();

                Cell cell = sheetdata.Descendants<Cell>().FirstOrDefault(c => string.Compare(c.CellReference.Value, "A2", true) == 0);

                if (workbookPart.SharedStringTablePart != null)
                {
                    string clientName = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(int.Parse(cell.CellValue.Text)).InnerText;
                    estimate.ClientName = clientName;

                } else
                {
                    estimate.ClientName = cell.CellValue.Text;

                }

                cell = sheetdata.Descendants<Cell>().FirstOrDefault(c => string.Compare(c.CellReference.Value, "B2", true) == 0);
                if (workbookPart.SharedStringTablePart != null)
                {
                    string jobCode = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(int.Parse(cell.CellValue.Text)).InnerText;
                    estimate.JobCode = jobCode;
                }
                else
                {
                    estimate.JobCode = cell.CellValue.Text;
                }

                cell = sheetdata.Descendants<Cell>().FirstOrDefault(c => string.Compare(c.CellReference.Value, "C2", true) == 0);
                if (workbookPart.SharedStringTablePart != null)
                {
                    string projectManager = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(int.Parse(cell.CellValue.Text)).InnerText;
                    estimate.ProjectManager = projectManager;
                } else
                {
                    estimate.ProjectManager = cell.CellValue.Text;
                }

                cell = sheetdata.Descendants<Cell>().FirstOrDefault(c => string.Compare(c.CellReference.Value, "D2", true) == 0);
                if (workbookPart.SharedStringTablePart != null)
                {
                    string dateCreated = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(int.Parse(cell.CellValue.Text)).InnerText;
                    estimate.CreatedDate = DateTime.Parse(dateCreated);
                } else
                {
                    estimate.CreatedDate = DateTime.Parse(cell.CellValue.Text);
                }

                var isValid = true;
                bool newPhaseFound = false;
                Estimator.UI.Model.EstimatePhase currentPhase = null;
                Estimator.UI.Model.EstimatePhaseRateCardItem currentEstimatePhaseRateCardItem = null;

                if (workbookPart.SharedStringTablePart != null)
                {
                    foreach (Row r in sheetdata.Elements<Row>())
                    {
                        if (r.RowIndex < 4)
                        {
                            continue;
                        }
                        if (workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(int.Parse(r.Elements<Cell>().FirstOrDefault().CellValue.Text)).InnerText == "Name")
                        {
                            //we have a new phase
                            if (currentPhase == null)
                            {
                                currentPhase = new Estimator.UI.Model.EstimatePhase();

                            }
                            else
                            {
                                currentPhase = new Estimator.UI.Model.EstimatePhase();
                            }
                            newPhaseFound = true;
                        }

                        if (workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(int.Parse(r.Elements<Cell>().FirstOrDefault().CellValue.Text)).InnerText == "Name")
                        {
                            currentPhase.Name = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(int.Parse(r.Elements<Cell>().ElementAtOrDefault(1).CellValue.Text)).InnerText;
                            continue;
                        }
                        if (workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(int.Parse(r.Elements<Cell>().FirstOrDefault().CellValue.Text)).InnerText == "Description")
                        {
                            currentPhase.Description = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(int.Parse(r.Elements<Cell>().ElementAtOrDefault(1).CellValue.Text)).InnerText;
                            continue;
                        }
                        if (workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(int.Parse(r.Elements<Cell>().FirstOrDefault().CellValue.Text)).InnerText == "Length In Weeks")
                        {
                            currentPhase.LengthInWeeks = int.Parse(workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(int.Parse(r.Elements<Cell>().ElementAtOrDefault(1).CellValue.Text)).InnerText);

                            estimate.EstimatePhases.Add(currentPhase);
                            continue;
                        }

                        bool inRateCardSection = false;
                        if (workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(int.Parse(r.Elements<Cell>().FirstOrDefault().CellValue.Text)).InnerText == "Rate Card Items")
                        {
                            inRateCardSection = true;
                            continue;
                        }
                        if (workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(int.Parse(r.Elements<Cell>().FirstOrDefault().CellValue.Text)).InnerText == "Role")
                        {
                            currentEstimatePhaseRateCardItem = new Estimator.UI.Model.EstimatePhaseRateCardItem();
                            currentEstimatePhaseRateCardItem.RateCardItem = new Estimator.UI.Model.RateCardItem();

                            currentEstimatePhaseRateCardItem.RateCardItem.RoleName = workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(int.Parse(r.Elements<Cell>().ElementAtOrDefault(1).CellValue.Text)).InnerText;
                            continue;
                        }
                        if (workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(int.Parse(r.Elements<Cell>().FirstOrDefault().CellValue.Text)).InnerText == "Count")
                        {
                            currentEstimatePhaseRateCardItem.Count = Int32.Parse(workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(int.Parse(r.Elements<Cell>().ElementAtOrDefault(1).CellValue.Text)).InnerText);
                            continue;
                        }
                        if (workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(int.Parse(r.Elements<Cell>().FirstOrDefault().CellValue.Text)).InnerText == "PercentageUtilized")
                        {
                            currentEstimatePhaseRateCardItem.PercentageUtilized = Int32.Parse(workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(int.Parse(r.Elements<Cell>().ElementAtOrDefault(1).CellValue.Text)).InnerText);
                            continue;
                        }
                        if (workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(int.Parse(r.Elements<Cell>().FirstOrDefault().CellValue.Text)).InnerText == "Rate")
                        {
                            currentEstimatePhaseRateCardItem.RateCardItem.Rate = Int32.Parse(workbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(int.Parse(r.Elements<Cell>().ElementAtOrDefault(1).CellValue.Text)).InnerText);
                            currentPhase.EstimatePhaseRateCardItems.Add(currentEstimatePhaseRateCardItem);

                            continue;
                        }
                    }
                } 
                else
                {
                    uint rowIndex = 4;
                    var foundEmptyRow = false;
                    var foundEmptyRowIndex = 0;
                    var foundMoreThanOneRow = false;
                    //foreach (Row r in sheetdata.Elements<Row>())
                    var columns = wsPart.Worksheet.GetFirstChild<SheetData>().
                                         Elements<Row>().Where(r => r.RowIndex == rowIndex);
                    while (!foundMoreThanOneRow )
                    {
                        if (columns.Count() == 0)
                        {
                            if (!foundEmptyRow && foundEmptyRowIndex != rowIndex)  //have to check for all of the items that have the same rowindex - this doesn't work quite right
                            {
                                foundEmptyRow = true;
                                foundEmptyRowIndex = (int)rowIndex;
                                rowIndex++;
                                columns = wsPart.Worksheet.GetFirstChild<SheetData>().
                                                  Elements<Row>().Where(r => r.RowIndex == rowIndex);
                                continue;
                            } else
                            {
                                if (foundEmptyRowIndex != rowIndex)
                                {
                                    foundMoreThanOneRow = true;

                                }
                                rowIndex++;
                                columns = wsPart.Worksheet.GetFirstChild<SheetData>().
                                                  Elements<Row>().Where(r => r.RowIndex == rowIndex);
                                continue;
                            }
                        } else 
                        {
                            foundEmptyRow = false;
                        }
                        switch (columns.ElementAt(0).InnerText)
                        {
                            case "Name":
                                //we have a new phase
                                if (currentPhase == null)
                                {
                                    currentPhase = new Estimator.UI.Model.EstimatePhase();

                                }
                                else
                                {
                                    currentPhase = new Estimator.UI.Model.EstimatePhase();
                                }
                                newPhaseFound = true;
                                currentPhase.Name = columns.ElementAt(1).InnerText;
                                break;
                            case "Description":
                                currentPhase.Description = columns.ElementAt(1).InnerText;
                                break;
                            case "Length In Weeks":
                                currentPhase.LengthInWeeks = int.Parse(columns.ElementAt(1).InnerText);
                                estimate.EstimatePhases.Add(currentPhase);
                                break;
                            case "Rate Card Items":

                                break;
                            case "Role":
                                currentEstimatePhaseRateCardItem = new Estimator.UI.Model.EstimatePhaseRateCardItem();
                                currentEstimatePhaseRateCardItem.RateCardItem = new Estimator.UI.Model.RateCardItem();
                                currentEstimatePhaseRateCardItem.RateCardItem.RoleName = columns.ElementAt(1).InnerText;
                                break;
                            case "Count":
                                currentEstimatePhaseRateCardItem.Count = Int32.Parse(columns.ElementAt(1).InnerText);
                                break;
                            case "PercentageUtilized":
                                currentEstimatePhaseRateCardItem.PercentageUtilized = Int32.Parse(columns.ElementAt(1).InnerText);
                                break;
                            case "Rate":
                                currentEstimatePhaseRateCardItem.RateCardItem.Rate = Int32.Parse(columns.ElementAt(1).InnerText);
                                currentPhase.EstimatePhaseRateCardItems.Add(currentEstimatePhaseRateCardItem);
                                break;
                            default:
                                break;  
                        }

                        
                        rowIndex++;
                        columns = wsPart.Worksheet.GetFirstChild<SheetData>().
                                          Elements<Row>().Where(r => r.RowIndex == rowIndex);

                    }
                }



                EstimatePhaseListForm.HidePhase();
                //await OnEstimateLoaded.InvokeAsync();
            }
        }
    }

    //private static Cell GetCell(Worksheet worksheet,
    //string columnName, uint rowIndex)
    //{
    //    var row = GetRow(worksheet, rowIndex);

    //    if (row == null)
    //        return null;

    //    return row.Elements<Cell>().Where(c => string.Compare
    //                                           (c.CellReference.Value, columnName +
    //                                                                   rowIndex, true) == 0).First();
    //}
    //// Given a worksheet and a row index, return the row.
    private static List<Row> GetRowData(Worksheet worksheet, uint rowIndex)
    {
        return worksheet.GetFirstChild<SheetData>().
            Elements<Row>().Where(r => r.RowIndex == rowIndex).ToList();
    }
 

}