@using Microsoft.Extensions.Logging
@inject ILogger<Error> Logger

<div class="container" style="margin-left:1em;margin-top:.5em;">
    <h5>Estimate Phases</h5>
    <div class="row" hidden="@_hideList" @onclick="CreateNewPhase">
        <span><span class="oi oi-plus" aria-hidden="true"></span> Create New Phase</span>
    </div>
    <div class="row" hidden="@_hideList">
        <div class="col-md-12">
            <h4>Phases</h4>
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Phase</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var phase in estimatePhases)
                    {
                        <tr>
                            <td>
                                <div @onclick="(e=>SelectPhase(phase))">@phase.Name</div>
                                <div>
                                    <h6>Staff Types Required</h6>
                                    <div class="row">
                                        <div class="col-2">Role Name</div>
                                        <div class="col-2">Rate</div>
                                        <div class="col-2">Number</div>
                                        <div class="col-2">% Utilized</div>
                                    </div>
                                    @foreach (var rci in phase.EstimatePhaseRateCardItems)
                                    {
                                        <div class="row">
                                            <div class="col-2">@rci.RateCardItem.RoleName</div>
                                            <div class="col-2">@rci.RateCardItem.Rate</div>
                                            <div class="col-2">@rci.Count</div>
                                            <div class="col-2">@rci.PercentageUtilized</div>
                                        </div>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    <div class="row" hidden="@_hidePhase" @onclick="ShowEstimatePhases">
        <span><span class="oi oi-list" aria-hidden="true"></span> Show Phases</span>
    </div>
    <div class="row" hidden="@_hidePhase">
        <EstimatePhase phase="@currentPhase" OnPhaseSaved="HandlePhaseSaved" OnPhaseDeleted="HandlePhaseDeleted" />
    </div>
</div>

@code {
    [Parameter]
    public List<Estimator.UI.Model.EstimatePhase> estimatePhases { get; set; } // = new Estimator.UI.Model.Estimate();

    [Parameter]
    public EventCallback<Estimator.UI.Model.EstimatePhase> OnPhaseSaved { get; set; }

    [Parameter]
    public EventCallback<Estimator.UI.Model.EstimatePhase> OnPhaseDeleted { get; set; }

    [CascadingParameter]
    public Error? Error { get; set; }

    private bool _hideList { get; set; } = false;
    private bool _hidePhase { get; set; } = true;

    private Estimator.UI.Model.EstimatePhase currentPhase { get; set; } = new Estimator.UI.Model.EstimatePhase();

    protected override void OnInitialized()
    {
        try
        {
            Logger.LogInformation("In Estimate Phase List Component");
        }
        catch (Exception ex)
        {
            Error?.ProcessError(ex);
        }
    }

    private void SelectPhase(Estimator.UI.Model.EstimatePhase phase)
    {
        currentPhase = phase;
        _hideList = true;
        _hidePhase = false;
    }


    private void CreateNewPhase()
    {
        currentPhase = new Estimator.UI.Model.EstimatePhase();
        currentPhase.Id = Incrementor.Next();

        _hideList = true;
        _hidePhase = false;
    }

    private void ShowEstimatePhases()
    {
        _hideList = false;
        _hidePhase = true;
    }



    private async Task HandlePhaseSaved(Model.EstimatePhase phase)
    {
        if (phase.Id == 0)
        {
            phase.Id = Incrementor.Next();
        }
        if (estimatePhases.Exists(p=>p.Id == phase.Id))
        {
            estimatePhases.Remove(phase);
        }
        estimatePhases.Add(phase);

        await OnPhaseSaved.InvokeAsync(phase);
    }

    private async Task HandlePhaseDeleted(Model.EstimatePhase phase)
    {
        estimatePhases.Remove(phase);
        await OnPhaseDeleted.InvokeAsync(phase);
        currentPhase = new Estimator.UI.Model.EstimatePhase();

    }


}
