@using Microsoft.Extensions.Logging
@inject ILogger<Error> Logger

<div class="container" style="margin-left:1em;margin-top:.5em;">
    <h5>Estimate Phases</h5>
    <div class="row"  @onclick="CreateNewPhase">
        <span><span class="oi oi-plus" aria-hidden="true"></span> Create New Phase</span>
    </div>
    <div class="row" hidden="@_hideList">
        <div class="col-md-12">
            <table class="table table-bordered">
            @foreach (var phase in estimatePhases)
            {
                <tr>
                    <td>
                        <div @onclick="(e=>SelectPhase(phase))"><b>@phase.Name - (@phase.LengthInWeeks weeks)</b></div>
                        <div>@phase.Description</div>
                        <div style="background-color:#eeeeee;padding:.2em;">
                            <div class="row">
                                <div class="col-7"><u>Role Name</u></div>
                                <div class="col-1"><u>Rate</u></div>
                                    <div class="col-2"><u>Number</u></div>
                                    <div class="col-2"><u>% Utilized</u></div>
                            </div>
                            @foreach (var rci in phase.EstimatePhaseRateCardItems)
                            {
                                <div class="row">
                                    <div class="col-7">@rci.RateCardItem.RoleName</div>
                                    <div class="col-1">@rci.RateCardItem.Rate</div>
                                    <div class="col-2">@rci.Count</div>
                                    <div class="col-2">@rci.PercentageUtilized</div>
                                </div>
                            }
                            <div class="row">
                                    <div class="col-7"></div>
                                    <div class="col-5"><span><b>Phase Cost: $@GetTotalCostForPhase(phase)</b></span></div>
                                    
                            </div>
                        </div>
                    </td>
                </tr>
            }
            </table>
            <span>Grand Total For Estimate: $@GetTotalCostForEstimate()</span>
        </div>
    </div>
    <div class="row" hidden="@_hidePhase" @onclick="ShowEstimatePhases">
        <span><span class="oi oi-list" aria-hidden="true"></span> Show Phases</span>
    </div>
    <div class="row" hidden="@_hidePhase">
        <EstimatePhase phase="@currentPhase" OnPhaseSaved="HandlePhaseSaved" OnPhaseDeleted="HandlePhaseDeleted" />
    </div>
</div>

@code {
    [Parameter]
    public List<Estimator.UI.Model.EstimatePhase> estimatePhases { get; set; } // = new Estimator.UI.Model.Estimate();

    [Parameter]
    public EventCallback<Estimator.UI.Model.EstimatePhase> OnPhaseSaved { get; set; }

    [Parameter]
    public EventCallback<Estimator.UI.Model.EstimatePhase> OnPhaseDeleted { get; set; }

    [CascadingParameter]
    public Error? Error { get; set; }

    private bool _hideList { get; set; } = false;
    private bool _hidePhase { get; set; } = true;

    private Estimator.UI.Model.EstimatePhase currentPhase { get; set; } = new Estimator.UI.Model.EstimatePhase();

    protected override void OnInitialized()
    {
        try
        {
            Logger.LogInformation("In Estimate Phase List Component");
            if (estimatePhases.Count == 0)
            {
                CreateNewPhase();

            }
        }
        catch (Exception ex)
        {
            Error?.ProcessError(ex);
        }
    }

    public void HidePhase()
    {
        _hideList = false ;
        _hidePhase = true;
    }

    private void SelectPhase(Estimator.UI.Model.EstimatePhase phase)
    {
        currentPhase = phase;
        _hideList = true;
        _hidePhase = false;
    }


    private void CreateNewPhase()
    {
        currentPhase = new Estimator.UI.Model.EstimatePhase();
        currentPhase.Id = Incrementor.Next();

        _hideList = true;
        _hidePhase = false;
    }

    private void ShowEstimatePhases()
    {
        _hideList = false;
        _hidePhase = true;
    }



    private async Task HandlePhaseSaved(Model.EstimatePhase phase)
    {
        if (phase.Id == 0)
        {
            phase.Id = Incrementor.Next();
        }
        if (estimatePhases.Exists(p=>p.Id == phase.Id))
        {
            estimatePhases.Remove(phase);
        }
        estimatePhases.Add(phase);

        await OnPhaseSaved.InvokeAsync(phase);
    }

    private async Task HandlePhaseDeleted(Model.EstimatePhase phase)
    {
        estimatePhases.Remove(phase);
        await OnPhaseDeleted.InvokeAsync(phase);
        currentPhase = new Estimator.UI.Model.EstimatePhase();

    }

    private decimal GetTotalCostForPhase(Model.EstimatePhase phase)
    {
        var total = 0m;
        foreach (var item in phase.EstimatePhaseRateCardItems)
        {
            total += item.Count * (item.RateCardItem.Rate * (phase.LengthInWeeks * 40));
        }
        return total;
    }

    private decimal GetTotalCostForEstimate()
    {
        var total = 0m;
        foreach(var phase in estimatePhases)
        {
            foreach (var item in phase.EstimatePhaseRateCardItems)
            {
                total += item.Count * (item.RateCardItem.Rate * (phase.LengthInWeeks * 40));
            }

        }
        return total;
    }

}
