
namespace Estimator.Infrastructure;

public class EstimatorContext : DbContext, IUnitOfWork
{
 public const string DEFAULT_SCHEMA = "estimator";
 public DbSet<Estimate> Estimates { get; set; }
 public DbSet<EstimatePhase> EstimatePhases { get; set; }
 public DbSet<EstimatePhaseRateCardItem> EstimatePhaseRateCardItems { get; set; }
 public DbSet<RateCard> RateCards { get; set; }
 public DbSet<RateCardItem> RateCardItems { get; set; }

 private readonly IMediator _mediator;
 private IDbContextTransaction _currentTransaction;

 public EstimatorContext(DbContextOptions<EstimatorContext> options) : base(options) { }

 public IDbContextTransaction GetCurrentTransaction() => _currentTransaction;

 public bool HasActiveTransaction => _currentTransaction != null;

 public EstimatorContext(DbContextOptions<EstimatorContext> options, IMediator mediator) : base(options)
 {
 _mediator = mediator ?? throw new ArgumentNullException(nameof(mediator));

 System.Diagnostics.Debug.WriteLine("EstimatorContext::ctor ->" + this.GetHashCode());
 }

 protected override void OnModelCreating(ModelBuilder modelBuilder)
 {
 modelBuilder.ApplyConfiguration(new EstimateEntityTypeConfiguration());
 modelBuilder.ApplyConfiguration(new EstimatePhaseEntityTypeConfiguration());
 modelBuilder.ApplyConfiguration(new EstimatePhaseRateCardItemEntityTypeConfiguration());
 modelBuilder.ApplyConfiguration(new RateCardEntityTypeConfiguration());
 modelBuilder.ApplyConfiguration(new RateCardItemEntityTypeConfiguration());

 }

 public async Task<bool> SaveEntitiesAsync(CancellationToken cancellationToken = default(CancellationToken))
 {
 
 
 
 
 
 
 await _mediator.DispatchDomainEventsAsync(this);

 
 
 var result = await base.SaveChangesAsync(cancellationToken);

 return true;
 }

 public async Task<IDbContextTransaction> BeginTransactionAsync()
 {
 if (_currentTransaction != null) return null;

 _currentTransaction = await Database.BeginTransactionAsync(IsolationLevel.ReadCommitted);

 return _currentTransaction;
 }

 public async Task CommitTransactionAsync(IDbContextTransaction transaction)
 {
 if (transaction == null) throw new ArgumentNullException(nameof(transaction));
 if (transaction != _currentTransaction) throw new InvalidOperationException($"Transaction {transaction.TransactionId} is not current");

 try
 {
 await SaveChangesAsync();
 await transaction.CommitAsync();
 }
 catch
 {
 RollbackTransaction();
 throw;
 }
 finally
 {
 if (_currentTransaction != null)
 {
 _currentTransaction.Dispose();
 _currentTransaction = null;
 }
 }
 }

 public void RollbackTransaction()
 {
 try
 {
 _currentTransaction?.Rollback();
 }
 finally
 {
 if (_currentTransaction != null)
 {
 _currentTransaction.Dispose();
 _currentTransaction = null;
 }
 }
 }
}

public class EstimatorContextDesignFactory : IDesignTimeDbContextFactory<EstimatorContext>
{
 public EstimatorContext CreateDbContext(string[] args)
 {
 var optionsBuilder = new DbContextOptionsBuilder<EstimatorContext>()
 .UseSqlServer("Server=.;Initial Catalog=EstimatorDb;Integrated Security=true");

 return new EstimatorContext(optionsBuilder.Options, new NoMediator());
 }

 class NoMediator : IMediator
 {
 public IAsyncEnumerable<TResponse> CreateStream<TResponse>(IStreamRequest<TResponse> request, CancellationToken cancellationToken = default)
 {
 return default(IAsyncEnumerable<TResponse>);
 }

 public IAsyncEnumerable<object?> CreateStream(object request, CancellationToken cancellationToken = default)
 {
 return default(IAsyncEnumerable<object?>);
 }

 public Task Publish<TNotification>(TNotification notification, CancellationToken cancellationToken = default) where TNotification : INotification
 {
 return Task.CompletedTask;
 }

 public Task Publish(object notification, CancellationToken cancellationToken = default)
 {
 return Task.CompletedTask;
 }

 public Task<TResponse> Send<TResponse>(IRequest<TResponse> request, CancellationToken cancellationToken = default)
 {
 return Task.FromResult<TResponse>(default(TResponse));
 }

 public Task<object> Send(object request, CancellationToken cancellationToken = default)
 {
 return Task.FromResult(default(object));
 }

 public Task Send<TRequest>(TRequest request, CancellationToken cancellationToken = default) where TRequest : IRequest
 {
 return Task.CompletedTask;
 }
 }
}


global using MediatR;
global using Microsoft.EntityFrameworkCore.Design;
global using Microsoft.EntityFrameworkCore.Metadata.Builders;
global using Microsoft.EntityFrameworkCore.Storage;
global using Microsoft.EntityFrameworkCore;
global using Estimator.Domain.AggregatesModel.Estimate;
global using Estimator.Domain.AggregatesModel.RateCard;

global using Estimator.Infrastructure;
global using Estimator.Infrastructure.Idempotency;
global using Estimator.Domain.Exceptions;
global using Estimator.Infrastructure.EntityConfigurations;
global using ProjectManager.Domain.Base;
global using System.Data;
global using System.Linq;
global using System.Threading.Tasks;
global using System.Threading;
global using System;
global using System.Collections.Generic;

namespace Estimator.Infrastructure;

static class MediatorExtension
{
 public static async Task DispatchDomainEventsAsync(this IMediator mediator, EstimatorContext ctx)
 {
 var domainEntities = ctx.ChangeTracker
 .Entries<Entity>()
 .Where(x => x.Entity.DomainEvents != null && x.Entity.DomainEvents.Any());

 var domainEvents = domainEntities
 .SelectMany(x => x.Entity.DomainEvents)
 .ToList();

 domainEntities.ToList()
 .ForEach(entity => entity.Entity.ClearDomainEvents());

 foreach (var domainEvent in domainEvents)
 await mediator.Publish(domainEvent);
 }
}


namespace Estimator.Infrastructure.EntityConfigurations
{
 public class EstimateEntityTypeConfiguration : IEntityTypeConfiguration<Estimate>
 {
 public void Configure(EntityTypeBuilder<Estimate> estimateConfiguration)
 {

 estimateConfiguration.ToTable("Estimates", EstimatorContext.DEFAULT_SCHEMA);

 estimateConfiguration.HasKey(o => o.Id);

 estimateConfiguration.Ignore(b => b.DomainEvents);

 estimateConfiguration.Property(o => o.Id)
 .UseHiLo("estimateseq", EstimatorContext.DEFAULT_SCHEMA);

 estimateConfiguration.Property<string>("ClientName").IsRequired();
 estimateConfiguration.Property<string>("JobCode").IsRequired();
 estimateConfiguration.Property<string>("ProjectManager").IsRequired();

 estimateConfiguration.Property<int>("RateCardId").IsRequired();

 
 estimateConfiguration.HasOne<RateCard>()
 .WithMany()
 .HasForeignKey("RateCardId")
 .OnDelete(DeleteBehavior.Restrict);

 estimateConfiguration.Property<decimal>("_totalEstimate")
 .UsePropertyAccessMode(PropertyAccessMode.Field)
 .HasColumnName("TotalEstimate")
 .IsRequired();

 var navigation = estimateConfiguration.Metadata.FindNavigation(nameof(Estimate.Phases));

 navigation.SetPropertyAccessMode(PropertyAccessMode.Field);

 }
 }


}


namespace Estimator.Infrastructure.EntityConfigurations
{
 public class EstimatePhaseEntityTypeConfiguration : IEntityTypeConfiguration<EstimatePhase>
 {
 public void Configure(EntityTypeBuilder<EstimatePhase> estimatePhaseConfiguration)
 {
 estimatePhaseConfiguration.ToTable("EstimatePhases", EstimatorContext.DEFAULT_SCHEMA);

 estimatePhaseConfiguration.HasKey(o => o.Id);

 estimatePhaseConfiguration.Ignore(b => b.DomainEvents);

 estimatePhaseConfiguration.Property(o => o.Id)
 .UseHiLo("estimatephaseseq", EstimatorContext.DEFAULT_SCHEMA);

 estimatePhaseConfiguration.Property<string>("PhaseName").IsRequired();
 estimatePhaseConfiguration.Property<int>("Hours").IsRequired();

 
 
 
 
 

 estimatePhaseConfiguration.Property<int>("EstimateId").IsRequired();

 
 estimatePhaseConfiguration.HasOne<Estimate>()
 .WithMany(e => e.Phases)
 .HasForeignKey("EstimateId")
 .OnDelete(DeleteBehavior.Cascade);
 }
 }
}


namespace Estimator.Infrastructure.EntityConfigurations
{
 public class EstimatePhaseRateCardItemEntityTypeConfiguration : IEntityTypeConfiguration<EstimatePhaseRateCardItem>
 {
 public void Configure(EntityTypeBuilder<EstimatePhaseRateCardItem> estimatePhaseRateCardItemConfiguration)
 {
 estimatePhaseRateCardItemConfiguration.ToTable("EstimatePhaseRateCardItems", EstimatorContext.DEFAULT_SCHEMA);

 estimatePhaseRateCardItemConfiguration.HasKey(o => o.Id);

 estimatePhaseRateCardItemConfiguration.Ignore(b => b.DomainEvents);

 estimatePhaseRateCardItemConfiguration.Property(o => o.Id)
 .UseHiLo("estimatephaseratecarditemseq", EstimatorContext.DEFAULT_SCHEMA);

 estimatePhaseRateCardItemConfiguration.Property<int>("EstimatePhaseId").IsRequired();

 
 estimatePhaseRateCardItemConfiguration.HasOne<EstimatePhase>()
 .WithMany(e => e.RateCardItems)
 .HasForeignKey("EstimatePhaseId")
 .OnDelete(DeleteBehavior.Cascade);

 estimatePhaseRateCardItemConfiguration.Property<int>("RateCardItemId").IsRequired();

 
 estimatePhaseRateCardItemConfiguration.HasOne<RateCardItem>()
 .WithMany()
 .HasForeignKey("RateCardItemId")
 .OnDelete(DeleteBehavior.Restrict);

 estimatePhaseRateCardItemConfiguration.Property<int>("Quantity").IsRequired();
 estimatePhaseRateCardItemConfiguration.Property<decimal>("Rate").IsRequired();
 }
 }
}


namespace Estimator.Infrastructure.EntityConfigurations
{
 public class RateCardEntityTypeConfiguration : IEntityTypeConfiguration<RateCard>
 {
 public void Configure(EntityTypeBuilder<RateCard> rateCardConfiguration)
 {
 rateCardConfiguration.HasKey(rc => rc.Id);
 rateCardConfiguration.Ignore(rc => rc.DomainEvents);

 rateCardConfiguration.Property(rc => rc.Name)
 .IsRequired()
 .HasMaxLength(100);

 
 var navigation = rateCardConfiguration.Metadata.FindNavigation(nameof(RateCard.Items));
 navigation.SetPropertyAccessMode(PropertyAccessMode.Field);

 rateCardConfiguration.HasMany(rc => rc.Items)
 .WithOne()
 .HasForeignKey("RateCardId")
 .IsRequired()
 .OnDelete(DeleteBehavior.Cascade);
 }
 }
}


namespace Estimator.Infrastructure.EntityConfigurations
{
 public class RateCardItemEntityTypeConfiguration : IEntityTypeConfiguration<RateCardItem>
 {
 public void Configure(EntityTypeBuilder<RateCardItem> rateCardItemConfiguration)
 {
 rateCardItemConfiguration.HasKey(rci => rci.Id);

 rateCardItemConfiguration.Property(rci => rci.RateCardItemId)
 .IsRequired();

 rateCardItemConfiguration.Property(rci => rci.RoleName)
 .IsRequired()
 .HasMaxLength(100);

 rateCardItemConfiguration.Property(rci => rci.Rate)
 .IsRequired();

 rateCardItemConfiguration.Property(rci => rci.EffectiveFrom)
 .IsRequired();

 rateCardItemConfiguration.Property(rci => rci.EffectiveTo);
 }
 }
}


namespace Estimator.Infrastructure.Idempotency;

public class ClientRequest
{
 public Guid Id { get; set; }
 public string Name { get; set; }
 public DateTime Time { get; set; }
}


namespace Estimator.Infrastructure.Idempotency;

public interface IRequestManager
{
 Task<bool> ExistAsync(Guid id);

 Task CreateRequestForCommandAsync<T>(Guid id);
}


namespace Estimator.Infrastructure.Idempotency;

public class RequestManager : IRequestManager
{
 private readonly EstimatorContext _context;

 public RequestManager(EstimatorContext context)
 {
 _context = context ?? throw new ArgumentNullException(nameof(context));
 }

 public async Task<bool> ExistAsync(Guid id)
 {
 var request = await _context.
 FindAsync<ClientRequest>(id);

 return request != null;
 }

 public async Task CreateRequestForCommandAsync<T>(Guid id)
 {
 var exists = await ExistAsync(id);

 var request = exists ?
 throw new EstimatorDomainException($"Request with {id} already exists") :
 new ClientRequest()
 {
 Id = id,
 Name = typeof(T).Name,
 Time = DateTime.UtcNow
 };

 _context.Add(request);

 await _context.SaveChangesAsync();
 }
}


namespace Estimator.Infrastructure.Repositories
{
 public class EstimateRepository : IEstimateRepository
 {
 private readonly EstimatorContext _context;

 public EstimateRepository(EstimatorContext context)
 {
 _context = context;
 }

 public async Task<Estimate> GetAsync(int id)
 {
 
 return await _context.Estimates
 .Include(e => e.RateCard)
 .Include(e => e.Phases)
 .FirstOrDefaultAsync(e => e.Id == id);
 }


 public async Task<IEnumerable<Estimate>> GetByClientNameAsync(string clientName)
 {
 
 return await _context.Estimates
 .Include(e => e.RateCard)
 .Include(e => e.Phases)
 .Where(e => e.ClientName == clientName)
 .ToListAsync();
 }

 public async Task<IEnumerable<Estimate>> GetByProjectManagerAsync(string projectManager)
 {
 
 return await _context.Estimates
 .Include(e => e.RateCard)
 .Include(e => e.Phases)
 .Where(e => e.ProjectManager == projectManager)
 .ToListAsync();
 }

 public async Task AddAsync(Estimate estimate)
 {
 await _context.Estimates.AddAsync(estimate);
 }

 public void Update(Estimate estimate)
 {
 _context.Estimates.Update(estimate);
 }

 public async Task<int> UnitOfWorkSaveChangesAsync()
 {
 return await _context.SaveChangesAsync();
 }

 public void Delete(Estimate estimate)
 {
 _context.Estimates.Remove(estimate);
 }

 

 }
}


namespace Estimator.Infrastructure.Repositories
{
 public interface IEstimateRepository
 {
 Task AddAsync(Estimate estimate);
 void Delete(Estimate estimate);
 Task<Estimate> GetAsync(int id);
 Task<IEnumerable<Estimate>> GetByClientNameAsync(string clientName);
 Task<IEnumerable<Estimate>> GetByProjectManagerAsync(string projectManager);
 Task<int> UnitOfWorkSaveChangesAsync();
 void Update(Estimate estimate);
 }
}

namespace Estimator.Infrastructure.Repositories
{
 public interface IRateCardRepository
 {
 Task AddAsync(RateCard rateCard);
 void Delete(RateCard rateCard);
 Task<RateCard> GetAsync(int id);
 Task<IEnumerable<RateCard>> GetAllAsync();
 Task<int> UnitOfWorkSaveChangesAsync();
 void Update(RateCard rateCard);
 }
}


namespace Estimator.Infrastructure.Repositories
{
 public class RateCardRepository : IRateCardRepository
 {
 private readonly EstimatorContext _context;

 public RateCardRepository(EstimatorContext context)
 {
 _context = context;
 }

 public async Task<RateCard> GetAsync(int id)
 {
 
 return await _context.RateCards
 .Include(rc => rc.Items)
 .FirstOrDefaultAsync(rc => rc.Id == id);
 }

 public async Task<IEnumerable<RateCard>> GetAllAsync()
 {
 
 return await _context.RateCards
 .Include(rc => rc.Items)
 .ToListAsync();
 }

 public async Task AddAsync(RateCard rateCard)
 {
 await _context.RateCards.AddAsync(rateCard);
 }

 public void Update(RateCard rateCard)
 {
 _context.RateCards.Update(rateCard);
 }

 public async Task<int> UnitOfWorkSaveChangesAsync()
 {
 return await _context.SaveChangesAsync();
 }

 public void Delete(RateCard rateCard)
 {
 _context.RateCards.Remove(rateCard);
 }

 }
}
